version: "3.8"

services:
  # MySQL Database - Production
  mysql:
    image: mysql:8.0
    container_name: wheelerknight_mysql_prod
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    ports:
      - "3306:3306"
    volumes:
      - mysql_data_prod:/var/lib/mysql
      - ./database/init:/docker-entrypoint-initdb.d
      - ./database/backups:/backups
    networks:
      - wheelerknight_network_prod
    command: --default-authentication-plugin=mysql_native_password --innodb-buffer-pool-size=256M --max-connections=100

  # Python Flask Backend - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile.prod
    container_name: wheelerknight_backend_prod
    restart: unless-stopped
    ports:
      - "5000:5000"
    environment:
      - FLASK_ENV=production
      - FLASK_DEBUG=False
      - DB_HOST=mysql
      - DB_PORT=3306
      - DB_NAME=${MYSQL_DATABASE}
      - DB_USER=${MYSQL_USER}
      - DB_PASSWORD=${MYSQL_PASSWORD}
      - SECRET_KEY=${SECRET_KEY}
      - JWT_SECRET_KEY=${JWT_SECRET_KEY}
      - CORS_ORIGINS=${CORS_ORIGINS}
      - EMAIL_HOST=${EMAIL_HOST}
      - EMAIL_PORT=${EMAIL_PORT}
      - EMAIL_USER=${EMAIL_USER}
      - EMAIL_PASSWORD=${EMAIL_PASSWORD}
      - MAX_FILE_SIZE=${MAX_FILE_SIZE}
      - UPLOAD_FOLDER=${UPLOAD_FOLDER}
    volumes:
      - backend_uploads_prod:/app/uploads
      - backend_logs_prod:/app/logs
    depends_on:
      - mysql
    networks:
      - wheelerknight_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # React Frontend - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile.prod
    container_name: wheelerknight_frontend_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    environment:
      - REACT_APP_API_URL=${REACT_APP_API_URL}
      - REACT_APP_ENVIRONMENT=production
      - REACT_APP_GOOGLE_ANALYTICS_ID=${REACT_APP_GOOGLE_ANALYTICS_ID}
      - REACT_APP_EMAILJS_SERVICE_ID=${REACT_APP_EMAILJS_SERVICE_ID}
      - REACT_APP_EMAILJS_TEMPLATE_ID=${REACT_APP_EMAILJS_TEMPLATE_ID}
      - REACT_APP_EMAILJS_PUBLIC_KEY=${REACT_APP_EMAILJS_PUBLIC_KEY}
    volumes:
      - frontend_static_prod:/usr/share/nginx/html
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
    depends_on:
      - backend
    networks:
      - wheelerknight_network_prod
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: wheelerknight_nginx_prod
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/ssl:/etc/nginx/ssl
      - frontend_static_prod:/usr/share/nginx/html
      - backend_uploads_prod:/usr/share/nginx/uploads
    depends_on:
      - frontend
      - backend
    networks:
      - wheelerknight_network_prod

  # Redis Cache (Optional)
  redis:
    image: redis:alpine
    container_name: wheelerknight_redis_prod
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data_prod:/data
    networks:
      - wheelerknight_network_prod
    command: redis-server --appendonly yes --maxmemory 128mb --maxmemory-policy allkeys-lru

  # Backup Service
  backup:
    image: mysql:8.0
    container_name: wheelerknight_backup_prod
    restart: "no"
    environment:
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${MYSQL_DATABASE}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_PASSWORD}
    volumes:
      - ./database/backups:/backups
      - ./scripts/backup.sh:/backup.sh
    networks:
      - wheelerknight_network_prod
    command: /bin/bash -c "chmod +x /backup.sh && /backup.sh"
    depends_on:
      - mysql

volumes:
  mysql_data_prod:
    driver: local
  backend_uploads_prod:
    driver: local
  backend_logs_prod:
    driver: local
  frontend_static_prod:
    driver: local
  redis_data_prod:
    driver: local

networks:
  wheelerknight_network_prod:
    driver: bridge
